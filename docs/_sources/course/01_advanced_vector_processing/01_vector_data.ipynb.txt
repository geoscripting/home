{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2: Vector data Processing in Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this session we will look at how geodata can be represented in Python using different data structures. We will use a GeoJSON file for this purpose, since it can be easily ready humans and machines. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vector data processing using fiona, shapely and geopandas relies on the [GeoJSON format](https://de.wikipedia.org/wiki/GeoJSON). Hence, features (no matter whether they origiinate from a shapefile) are respresented as dictionaries following the GeoJSON specifications. Therefore, I would recommend using geojson files instead of shapefiles when working with Python. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Creating GeoJSON data\n",
    "\n",
    "### Exercise 1:\n",
    "1. Go to [geojson.io](http://geojson.io).\n",
    "2. Create a Point, a LineString and a Polygon anywhere on the map. \n",
    "3. Move the Point somewhere else by editing the GeoJSON data in the editor. \n",
    "4. Download the file. \n",
    "5. Bonus: try to generate a polygon with a hole."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Reading GeoJSON in Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercise:__ Load your geojson file  into Python as a string using the `open` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "geojson_path = \"./data/some_features.geojson\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"color\":\"green\",\"id\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.670530319213867,49.41337442939828],[8.685293197631836,49.41337442939828],[8.685293197631836,49.421861555723595],[8.670530319213867,49.421861555723595],[8.670530319213867,49.41337442939828]]]}},{\"type\":\"Feature\",\"properties\":{\"color\":\"blue\",\"id\":2},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.680486679077148,49.418455714236885],[8.69619369506836,49.418455714236885],[8.69619369506836,49.42833758576036],[8.680486679077148,49.42833758576036],[8.680486679077148,49.418455714236885]],[[8.688468933105469, 49.42398310798032],\\n   [8.693962097167969, 49.42398310798032],\\n   [8.693962097167969, 49.426607006252176],\\n   [8.688468933105469, 49.426607006252176],\\n   [8.688468933105469, 49.42398310798032]]]}}]}\\n'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "src = open(geojson_path, \"r\")\n",
    "polygons_str = open(geojson_path, \"r\").read()\n",
    "src.close()\n",
    "polygons_str"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Questions__\n",
    "1. Name the basic data structures in Python.\n",
    "2. Which one of those is most suitable to store geojson data?\n",
    "3. Decode the string to a more suitable data structure."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decoding json\n",
    "We can also do this in one go using a context manager (\"with\") which will close the data set after all operations have been performed. The resulting object is now of type dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(geojson_path, \"r\") as src:\n",
    "    data_geojson = json.loads(src.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'type': 'FeatureCollection',\n",
       " 'features': [{'type': 'Feature',\n",
       "   'properties': {'color': 'green', 'id': 1},\n",
       "   'geometry': {'type': 'Polygon',\n",
       "    'coordinates': [[[8.670530319213867, 49.41337442939828],\n",
       "      [8.685293197631836, 49.41337442939828],\n",
       "      [8.685293197631836, 49.421861555723595],\n",
       "      [8.670530319213867, 49.421861555723595],\n",
       "      [8.670530319213867, 49.41337442939828]]]}},\n",
       "  {'type': 'Feature',\n",
       "   'properties': {'color': 'blue', 'id': 2},\n",
       "   'geometry': {'type': 'Polygon',\n",
       "    'coordinates': [[[8.680486679077148, 49.418455714236885],\n",
       "      [8.69619369506836, 49.418455714236885],\n",
       "      [8.69619369506836, 49.42833758576036],\n",
       "      [8.680486679077148, 49.42833758576036],\n",
       "      [8.680486679077148, 49.418455714236885]],\n",
       "     [[8.688468933105469, 49.42398310798032],\n",
       "      [8.693962097167969, 49.42398310798032],\n",
       "      [8.693962097167969, 49.426607006252176],\n",
       "      [8.688468933105469, 49.426607006252176],\n",
       "      [8.688468933105469, 49.42398310798032]]]}}]}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_geojson"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fiona: Reading and writing geographic data in Python\n",
    "\n",
    "\"[Fiona] focuses on reading and writing data in standard Python IO style and relies upon familiar Python types and protocols such as files, dictionaries, mappings, and iterators instead of classes specific to GDAL's OpenGIS Reference Implementation (OGR).\" [Fiona Documentation](https://github.com/Toblerity/Fiona)\n",
    "\n",
    "Reading the data like that still seems a bit cumbersome and it wouldn't work for shapefiles. Luckily there is Fiona - a Python library that provides an interface to GDAL/OGR to read and write data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fiona.collection.Collection"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import fiona\n",
    "source = fiona.open(geojson_path)\n",
    "features = list(source)\n",
    "type(source)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can read different metadata information from the fiona. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'driver': 'GeoJSON',\n",
       " 'schema': {'properties': OrderedDict([('color', 'str'), ('id', 'int')]),\n",
       "  'geometry': 'Polygon'},\n",
       " 'crs': {'init': 'epsg:4326'},\n",
       " 'crs_wkt': 'GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]]'}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source.crs\n",
    "source.meta"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As with every file connection, it is important to explicitly close them after your done with it. This is usually done using the `close()` method. However, very often forgotten. To avoid conflicts, it is better to use context managers. You create them using the `with` statement. Everything inside the block is executed while the file is open. Afterwards the file is closed automatically. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "source.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "with fiona.open(geojson_path) as src:\n",
    "    #for item in src:\n",
    "    #    print(item)\n",
    "    features = list(src)\n",
    "    crs = src.crs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2:\n",
    "__1. Load the data from the file \"./cs4geos_ss19/exercice/ex1/polygons.geojson\" into Python.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "geojson_path_2 = \"./data/some_features.geojson\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "with fiona.open(geojson_path_2) as src:\n",
    "    features = list(src)\n",
    "    crs = src.crs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Questions:__\n",
    "1. What how many features are contained in the geojson file? \n",
    "2. What is the difference between the geometries of the features?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__2. Save the features to separate new variables 'feature1' and 'feature2'.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature1 = features[0]\n",
    "feature2 = features[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__3. Print the coordinates of feature2.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[(8.680486679077148, 49.418455714236885),\n",
       "  (8.69619369506836, 49.418455714236885),\n",
       "  (8.69619369506836, 49.42833758576036),\n",
       "  (8.680486679077148, 49.42833758576036),\n",
       "  (8.680486679077148, 49.418455714236885)],\n",
       " [(8.688468933105469, 49.42398310798032),\n",
       "  (8.693962097167969, 49.42398310798032),\n",
       "  (8.693962097167969, 49.426607006252176),\n",
       "  (8.688468933105469, 49.426607006252176),\n",
       "  (8.688468933105469, 49.42398310798032)]]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature2[\"geometry\"][\"coordinates\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__4. Fill the hole of the geometry of feature2 by manipulating the geojson dictionary. Afterwards, execute the cell above again to see how the coordinates changed.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "del feature2[\"geometry\"][\"coordinates\"][1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Geometric Operations in Python using Shapely\n",
    "This works, but if we want to perform more complex geometric operations such as intersections between two geometries we need more complex data structures than a dictionary.\n",
    "Shapely is the perfect tool for this. Shapely is a Python module which converts dictionaries / geojson objects to geometry objects and allows us to perform geospatial operations. Check out the [Shapely User Manual](https://shapely.readthedocs.io/en/stable/manual.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from shapely.geometry import shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__0. Load the data from the file \"./cs4geos_ss19/exercice/ex1/polygons.geojson\" into Python again.__ Note: You don't have the copy the code here again, just execute the relevant cells above again."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__1. Extract the geometries of the two features and save them to new variables called 'geometry1' and 'geometry2'. What is the data type?__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'type': 'Polygon',\n",
       " 'coordinates': [[(8.680486679077148, 49.418455714236885),\n",
       "   (8.69619369506836, 49.418455714236885),\n",
       "   (8.69619369506836, 49.42833758576036),\n",
       "   (8.680486679077148, 49.42833758576036),\n",
       "   (8.680486679077148, 49.418455714236885)]]}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "geometry1 = feature1[\"geometry\"]\n",
    "geometry2 = feature2[\"geometry\"]\n",
    "geometry2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__2. Use the method `shapely.shape` to convert the dictionary representation of the geometry to a shapely object. What is the data type of the new object?__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "shapely.geometry.polygon.Polygon"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "geom_obj1 = shape(geometry1)\n",
    "geom_obj2 = shape(geometry2)\n",
    "type(geom_obj1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__3. Plot the geometry of feature1.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100.0\" height=\"100.0\" viewBox=\"8.66993980407715 49.41278391426156 0.01594390869140483 0.009668156598756639\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,98.83523598512187)\"><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.0003188781738280966\" opacity=\"0.6\" d=\"M 8.670530319213867,49.41337442939828 L 8.685293197631836,49.41337442939828 L 8.685293197631836,49.421861555723595 L 8.670530319213867,49.421861555723595 L 8.670530319213867,49.41337442939828 z\" /></g></svg>"
      ],
      "text/plain": [
       "<shapely.geometry.polygon.Polygon at 0x11cd961d0>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "geom_obj1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__4. Calculate the area of the polygon.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00012529441405854442"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "geom_obj1.area"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__5. Intersect the geometries of the two features.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.637024030019807e-05"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "geom_obj2.intersection(geom_obj1).area"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__6. Creating new geometries with Shapely__\n",
    "\n",
    "We can also use Shapely to create new geometry objects and the convert them to geojson dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'type': 'Point', 'coordinates': (13.0, 49.0)}"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from shapely.geometry import Point, mapping\n",
    "point = Point([13, 49])\n",
    "point\n",
    "point_json = mapping(point)\n",
    "point_json"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__1. Create a rectangle geometry using shapely.__ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "from shapely.geometry import Polygon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "coordinates = [(0., 0.), (0., 1.), (1., 1.), (1., 0.), (0., 0.)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "rectangel = Polygon(coordinates)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__2. Create a point which is located inside the rectangle.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "point = Point(0.5, 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__3. Use the `within()` function to check whether the point is within the rectangle.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "point.within(rectangel)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Geospatial analyses with attribute data using Geopandas\n",
    "With shapely we can perform geospatial operations, but for some spatial analyses we also need to include attribute information of the features. Therefore, we need another layer of abstraction --> Geopandas!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_df = gpd.read_file(geojson_path_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>id</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>1</td>\n",
       "      <td>POLYGON ((8.670530319213867 49.41337442939828,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>blue</td>\n",
       "      <td>2</td>\n",
       "      <td>POLYGON ((8.680486679077148 49.41845571423688,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   color  id                                           geometry\n",
       "0  green   1  POLYGON ((8.670530319213867 49.41337442939828,...\n",
       "1   blue   2  POLYGON ((8.680486679077148 49.41845571423688,..."
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also plot the data with geopandas, but we need to enable matplotlib within jupyter using the magic command `%matplotlib inline`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1269d54a8>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_df.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks more fancy with a background map. So lets add openstreetmap as a basemap with mplleaflet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.015512e+06\n",
       "1    1.141046e+06\n",
       "dtype: float64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_df.to_crs({\"init\": \"epsg:32633\"}).area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "import mplleaflet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/chludwig/Development/meinGruen/code/green_tag_info/env/green_tag_info/lib/python3.7/site-packages/IPython/core/display.py:689: UserWarning: Consider using IPython.display.IFrame instead\n",
      "  warnings.warn(\"Consider using IPython.display.IFrame instead\")\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<iframe src=\"data:text/html;base64,PGhlYWQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGVhZmxldC8wLjcuMy9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGVhZmxldC8wLjcuMy9sZWFmbGV0LmNzcyIgLz4KICA8c3R5bGU+CiAgICAjbWFwNjlmODcyNTMyYjRkNGE2YzkwZjM4MjA5MzBlMGY3ZmMgewogICAgICBoZWlnaHQ6MTAwJTsKICAgIH0KICA8L3N0eWxlPiAKPC9oZWFkPgo8Ym9keT4KICA8ZGl2IGlkPSJtYXA2OWY4NzI1MzJiNGQ0YTZjOTBmMzgyMDkzMGUwZjdmYyI+PC9kaXY+CjxzY3JpcHQgdGV4dD0idGV4dC9qYXZhc2NyaXB0Ij4KdmFyIG1hcCA9IEwubWFwKCdtYXA2OWY4NzI1MzJiNGQ0YTZjOTBmMzgyMDkzMGUwZjdmYycpOwpMLnRpbGVMYXllcigKICAiaHR0cDovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZyIsCiAge21heFpvb206MTksIGF0dHJpYnV0aW9uOiAnPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2p3YXNzL21wbGxlYWZsZXQiPm1wbGxlYWZsZXQ8L2E+IHwgTWFwIGRhdGEgKGMpIDxhIGhyZWY9Imh0dHA6Ly9vcGVuc3RyZWV0bWFwLm9yZyI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzJ30pLmFkZFRvKG1hcCk7CnZhciBnakRhdGEgPSB7InR5cGUiOiAiRmVhdHVyZUNvbGxlY3Rpb24iLCAiZmVhdHVyZXMiOiBbeyJ0eXBlIjogIkZlYXR1cmUiLCAiZ2VvbWV0cnkiOiB7InR5cGUiOiAiUG9seWdvbiIsICJjb29yZGluYXRlcyI6IFtbWzguNjcwNTMwMzE5MjEzODY3LCA0OS40MTMzNzQ0MjkzOTgyOF0sIFs4LjY4NTI5MzE5NzYzMTgzNiwgNDkuNDEzMzc0NDI5Mzk4MjhdLCBbOC42ODUyOTMxOTc2MzE4MzYsIDQ5LjQyMTg2MTU1NTcyMzU5NV0sIFs4LjY3MDUzMDMxOTIxMzg2NywgNDkuNDIxODYxNTU1NzIzNTk1XSwgWzguNjcwNTMwMzE5MjEzODY3LCA0OS40MTMzNzQ0MjkzOTgyOF1dXX0sICJwcm9wZXJ0aWVzIjogeyJjb2xvciI6ICJub25lIiwgIndlaWdodCI6IDEuMCwgIm9wYWNpdHkiOiBudWxsLCAiZmlsbENvbG9yIjogIiMxRjc3QjQiLCAiZGFzaEFycmF5IjogIjEwLDAifX0sIHsidHlwZSI6ICJGZWF0dXJlIiwgImdlb21ldHJ5IjogeyJ0eXBlIjogIlBvbHlnb24iLCAiY29vcmRpbmF0ZXMiOiBbW1s4LjY4MDQ4NjY3OTA3NzE0OCwgNDkuNDE4NDU1NzE0MjM2ODg1XSwgWzguNjk2MTkzNjk1MDY4MzYsIDQ5LjQxODQ1NTcxNDIzNjg4NV0sIFs4LjY5NjE5MzY5NTA2ODM2LCA0OS40MjgzMzc1ODU3NjAzNl0sIFs4LjY4MDQ4NjY3OTA3NzE0OCwgNDkuNDI4MzM3NTg1NzYwMzZdLCBbOC42ODA0ODY2NzkwNzcxNDgsIDQ5LjQxODQ1NTcxNDIzNjg4NV1dLCBbWzguNjg4NDY4OTMzMTA1NDY5LCA0OS40MjM5ODMxMDc5ODAzMl0sIFs4LjY5Mzk2MjA5NzE2Nzk2OSwgNDkuNDIzOTgzMTA3OTgwMzJdLCBbOC42OTM5NjIwOTcxNjc5NjksIDQ5LjQyNjYwNzAwNjI1MjE3Nl0sIFs4LjY4ODQ2ODkzMzEwNTQ2OSwgNDkuNDI2NjA3MDA2MjUyMTc2XSwgWzguNjg4NDY4OTMzMTA1NDY5LCA0OS40MjM5ODMxMDc5ODAzMl1dXX0sICJwcm9wZXJ0aWVzIjogeyJjb2xvciI6ICJub25lIiwgIndlaWdodCI6IDEuMCwgIm9wYWNpdHkiOiBudWxsLCAiZmlsbENvbG9yIjogIiMxRjc3QjQiLCAiZGFzaEFycmF5IjogIjEwLDAifX1dfTsKCmlmIChnakRhdGEuZmVhdHVyZXMubGVuZ3RoICE9IDApIHsKICB2YXIgZ2ogPSBMLmdlb0pzb24oZ2pEYXRhLCB7CiAgICBzdHlsZTogZnVuY3Rpb24gKGZlYXR1cmUpIHsKICAgICAgcmV0dXJuIGZlYXR1cmUucHJvcGVydGllczsKICAgIH0sCiAgICBwb2ludFRvTGF5ZXI6IGZ1bmN0aW9uIChmZWF0dXJlLCBsYXRsbmcpIHsKICAgICAgdmFyIGljb24gPSBMLmRpdkljb24oeydodG1sJzogZmVhdHVyZS5wcm9wZXJ0aWVzLmh0bWwsIAogICAgICAgIGljb25BbmNob3I6IFtmZWF0dXJlLnByb3BlcnRpZXMuYW5jaG9yX3gsIAogICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXMuYW5jaG9yX3ldLCAKICAgICAgICAgIGNsYXNzTmFtZTogJ2VtcHR5J30pOyAgLy8gV2hhdCBjYW4gSSBkbyBhYm91dCBlbXB0eT8KICAgICAgcmV0dXJuIEwubWFya2VyKGxhdGxuZywge2ljb246IGljb259KTsKICAgIH0KICB9KTsKICBnai5hZGRUbyhtYXApOwogIAogIG1hcC5maXRCb3VuZHMoZ2ouZ2V0Qm91bmRzKCkpOwp9IGVsc2UgewogIG1hcC5zZXRWaWV3KFswLCAwXSwgMSk7Cn0KPC9zY3JpcHQ+CjwvYm9keT4=\" width=\"100%\" height=\"240\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_df.plot()\n",
    "mplleaflet.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great you went all the way from creating your geodata by hand up to displaying it in Python. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to learn more about GeoPandas, check out the tutorial in the course repository located in  './exercises/ex1/geopandas-tutorial'. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Final exercise:__ Remember Exercise D from the GeoScripting course. Solve the temperature exercise using GeoPandas. \n",
    "\n",
    "* Read the shapefile _DWD_temperature.shp_ using GeoPandas.\n",
    "* Derive and print the descriptive statistical values of the column _temperature_ (min, max, mean, median,\n",
    "sum)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "* Complex and more abstract data types are needed to handle geospatial data and perform geospatial analyses in Python.\n",
    "* Note that these data types are based on a cascade of simpler data types.\n",
    "* Therefore, a Python library such as GeoPandas usually has a numer of dependencies (e.g. shapely, fiona)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References:\n",
    "\n",
    "[Getting Started on Geospatial Analysis with Python, GeoJSON and GeoPandas](https://www.twilio.com/blog/2017/08/geospatial-analysis-python-geojson-geopandas.html)\n",
    "        "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (green_tag_info)",
   "language": "python",
   "name": "green_tag_info"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
