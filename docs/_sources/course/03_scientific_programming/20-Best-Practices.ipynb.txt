{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Best Practices in Scientific Programming\n",
    "\n",
    "Heidelberg University | Institute of Geography | August 12th 2020\n",
    "\n",
    "Christina Ludwig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Agenda\n",
    "\n",
    "0. Recap: Vectorization\n",
    "1. Learning goals\n",
    "2. Open Reproducible Science\n",
    "3. Good scientific code\n",
    "4. Practical: \n",
    "    * Unit testing\n",
    "    * Optimization\n",
    "    * Some more useful git stuff\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Learning goals\n",
    "\n",
    "1. Define _open reproducible science_ and name its benefits.\n",
    "2. Explain the requirements of _good scientific code_.\n",
    "3. Test your code in python.\n",
    "4. Explain optimization strategies. \n",
    "4. Compare your code to previous versions using git. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Open Reproducible Science\n",
    " \n",
    "### 1. What does 'open' mean?\n",
    "\n",
    "### 2. What does 'reproducible' mean?\n",
    "\n",
    "### 3. Why is it important?\n",
    "\n",
    "\n",
    "#### Discuss in breakout rooms -  10 min"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "from course_utils import make_groups"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\"Breakout Room 1: ['Hannah' 'Leonie Marie' 'Julian P' 'Rebekka']\",\n",
       " \"Breakout Room 2: ['Mark' 'Julian G' 'Anna' 'Matthias']\"]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "make_groups(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## What does _Open Scientific Data_ mean?\n",
    "\n",
    "\n",
    "In 2016, the [FAIR Guiding Principles for scientific data management and stewardship](https://www.nature.com/articles/sdata201618) were published in Scientific Data.\n",
    "\n",
    "The authors intended to provide guidelines to improve the\n",
    "* Findability,\n",
    "* Accessibility,\n",
    "* Interoperability, and\n",
    "* Reuse of digital assets.\n",
    "\n",
    "The principles emphasise machine-actionability because humans increasingly rely on computational support to deal with data as a result of the increase in volume, complexity, and creation speed of data.\n",
    "\n",
    "Source: [go-fair.ogr](https://www.go-fair.org/fair-principles/>)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "\n",
    "## What does _Reproducible Science_ mean?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "\n",
    "**Reproducing** the result of a computation means running the same software on the same input data and obtaining the same results. ([Rougier et al, 2017](https://www.frontiersin.org/articles/10.3389/fninf.2017.00076/full))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Replicating** a published result means writing and then running new software based on the description of a computational model or method provided in the original pub-lication, and obtaining results that are similar enough tobe considered equivalent. ([Rougier et al, 2017](https://www.frontiersin.org/articles/10.3389/fninf.2017.00076/full))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "&rarr; But there are different opinions on this definition see [Plesser, 2018](https://www.frontiersin.org/articles/10.3389/fninf.2017.00076/full#B17)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## What does _Reproducible Science_ mean?\n",
    "\n",
    "**re-runnable, repeatable, reproducible, reusable, and replicable.**\n",
    "\n",
    "\"The code should be executable (re-runnable) and produce the same result more than once (repeatable); it should allow an investigator to reobtain the published results (reproducible) while being easy to use, understand and modify (reusable), and it should act as an available reference for any ambiguity in the algorithmic descriptions of the article (replicable).\" ([Benureau & Rougier, 2018](https://www.frontiersin.org/articles/10.3389/fninf.2017.00069/full))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "\n",
    "## What are the benefits of _Open Reproducible Science_ ?\n",
    "\n",
    "* __Transparency__ in the scientific process, as anyone including the general public can access the data, methods, and results.\n",
    "* __Ease of replication and extension__ of your work by others, which further supports __peer review and collaborative learning in the scientific community.__\n",
    "&rarr; Avoiding paper retractions due to computation bugs  \n",
    "&rarr; Code is increasingly more required for journal review (e.g. [o2r](https://o2r.info/results/))  \n",
    "* It supports you! You can __easily understand and re-run your own analyses__ as often as needed and after time has passed.\n",
    "\n",
    "[Source](https://www.earthdatascience.org/courses/intro-to-earth-data-science/open-reproducible-science/get-started-open-reproducible-science/)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## What is _good scientific code_ ?\n",
    "\n",
    "\n",
    " <img src=\"./img/wtf_minute.jpeg\" alt=\"wtf_per_minute\" width=500>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "\n",
    "## What is _good scientific code_ ?\n",
    "\n",
    "\n",
    "Group 1: Imagine you are a **web developer**.\n",
    "\n",
    "Group 2: Imagine you are a **scientist**.\n",
    "\n",
    "__What is important for your software to be considered _good_ ?__\n",
    "\n",
    "* Efficiency / Speed\n",
    "* Readability\n",
    "* Maintainability\n",
    "* Reusability\n",
    "* Reliability / Accurate results\n",
    "\n",
    "__Order the criteria by priority__ starting with the most important one on top:\n",
    "\n",
    "&rarr; Put your ranking on the chaospad https://pads.ccc.de/r61LZPBk8L\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\"Breakout Room 1: ['Mark' 'Anna' 'Julian G' 'Leonie Marie']\",\n",
       " \"Breakout Room 2: ['Julian P' 'Hannah' 'Rebekka' 'Matthias']\"]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "make_groups(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### There is usually a compromise between readability and efficiency [(Rougier, 2017)](https://www.labri.fr/perso/nrougier/from-python-to-numpy/#readability-vs-speed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "def function_1(seq, sub):\n",
    "    return [i for i in range(len(seq) - len(sub)) if seq[i:i+len(sub)] == sub]\n",
    "\n",
    "def function_2(seq, sub):\n",
    "    target = np.dot(sub, sub)\n",
    "    candidates = np.where(np.correlate(seq, sub, mode='valid') == target)[0]\n",
    "    check = candidates[:, np.newaxis] + np.arange(len(sub))\n",
    "    mask = np.all((np.take(seq, check) == sub), axis=-1)\n",
    "    return candidates[mask]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## How to write _good scientific code_\n",
    "\n",
    "* Wilson, G., Aruliah, D. A., Brown, C. T., Hong, N. P. C., Davis, M., Guy, R. T., ... & Waugh, B. (2014). [Best practices for scientific computing](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3886731/). PLoS biology, 12(1).\n",
    "* Wilson, G., Bryan, J., Cranston, K., Kitzes, J., Nederbragt, L., & Teal, T. K. (2017). [Good enough practices in scientific computing.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5480810/) PLoS computational biology, 13(6)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Enough theory, let's put it into practice!\n",
    "\n",
    "Today, we will look at these methods: \n",
    "\n",
    "1. __Unit testing__\n",
    "2. __Optimization__ \n",
    "3. __Some useful git stuff__\n",
    "\n",
    "More later, e.g.\n",
    "\n",
    "* Increase readability using refactoring, pylint, and pre-commit hooks\n",
    "* __Organize code__ into functions, modules and config files. \n",
    "* Use __assertions__ to find errors quickly\n",
    "* Write __documentation__\n",
    "* etc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## 1. Unit Testing\n",
    "\n",
    "Testing frameworks in Python \n",
    "* unittest\n",
    "* nosetest\n",
    "* __pytest__\n",
    "\n",
    "Every test function needs to start with \"test_\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### What a good test looks like\n",
    "#### Good:\n",
    "* Short and quick to execute\n",
    "* Easy to read\n",
    "* Exercise one thing\n",
    "* Fails fast\n",
    "\n",
    "#### Bad:\n",
    "* Relies on data files\n",
    "* Messes with “real-life” files, servers, databases"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Basic structure of a test\n",
    "\n",
    "__Given:__ Put your system in the right state for testing\n",
    "* Create data, initialize parameters, define constants…\n",
    "\n",
    "__When:__ Execute the feature that you are testing\n",
    "* Typically one or two lines of code\n",
    "\n",
    "__Then:__ Compare outcomes with the expected ones\n",
    "* Define the expected result of the test\n",
    "* Set of assertions that check that the new state of your system matches your expectations\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Example: Tests for ‘lower’ method of strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "def test_lower():\n",
    "    # Given\n",
    "    string = 'HeLlO wOrld'\n",
    "    expected = 'hello world'\n",
    "    # When\n",
    "    output = string.lower()\n",
    "    # Then\n",
    "    assert output == expected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "def test_lower():\n",
    "    # Given\n",
    "    # Each test case is a tuple of (input, expected_result)    \n",
    "    test_cases = [('HeLlO wOrld', 'hello world'),('hi', 'hi'),('123 ([?', '123 ([?'),('', '')]\n",
    "    for string, expected in test_cases:\n",
    "        # When\n",
    "        output = string.lower()\n",
    "        # Then\n",
    "        assert output == expected"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Code often breaks in corner cases: \n",
    "empty lists, None, NaN, 0.0, lists with repeated elements, non-existing file, …\n",
    "\n",
    "This often involves making design decision: respond to corner case with __special behavior, or raise meaningful exception?__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'lower'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-f5e8a0b3a989>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mstring\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mstring\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'lower'"
     ]
    }
   ],
   "source": [
    "string = None\n",
    "string.lower()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Integrating debugging and testing\n",
    "### When you find a bug:\n",
    "1. Reproduce it in a __small simple test__ to make it fail fast.\n",
    "2. __Debug your code__ so that all tests pass.\n",
    "\n",
    "&rarr; In this way, you __increase your test coverage__ step by step __making your code more robust__ with each test. \n",
    "\n",
    "&rarr; If you work on your code, __run the tests regularly__ so you can make sure that none of your fixed bugs come back unanounced."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Exercise:\n",
    "\n",
    "Open this repository folder in PyCharm. The folder _src_ contains the `Poylgon` class which we have written on the first day. \n",
    "\n",
    "1. Fork this repository: https://github.com/geoscripting/03_scientific_programming.git\n",
    "2. Clone __your__ forked repository to your computer. \n",
    "3. Implement the `MyPolygon.envelope()` method with the code you wrote on Monday. \n",
    "4. Write tests to make sure that the `MyPolygon.envelope()` works correctly. Don't forget corner cases. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## 2. Optimization\n",
    "\n",
    "Once the reliability of your code is ensured using the tests, your code is ready for optimization.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "\n",
    "### Order the following optimization steps in chronological order of how you would proceed: \n",
    "\n",
    "* Use GPU acceleration\n",
    "* Use a “magic optimization” tool, like numexpr, or numba; \u000b",
    "or a “magic parallelization” tool, like joblib or dask\n",
    "* Use Cython\n",
    "* Don’t do anything\n",
    "* Vectorize your code using numpy\n",
    "* Parallelize your code\n",
    "* Spend some money on better hardware\n",
    "\n",
    "&rarr; Put your ranking down as notes in your Breakout room in Teams.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\"Breakout Room 1: ['Matthias' 'Leonie Marie' 'Hannah']\",\n",
       " \"Breakout Room 2: ['Rebekka' 'Mark' 'Anna']\",\n",
       " \"Breakout Room 3: ['Julian G' 'Julian P']\"]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "make_groups(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## When optimizing code, remember: \n",
    "\n",
    "* __Avoid premature optimization__\n",
    "* Python is slower than C, but - as we've seen - __many costly operations are already optimized__ in the background\n",
    "* __Programming time is mostly more expensive__ than computation time.\n",
    "* __Prioritize your tasks:__ Always weight the time you spend on a task vs its benefits e.g. us an issue tracker on GitHub"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## 2. Optimization Workflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "__1. Make it work:__ \n",
    "* Write simple code which gets the job done.\n",
    "* Don't optimize prematurely or add functionalities which you might not even need."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "__2. Make it work reliably:__ \n",
    "* Write automated unit tests.\n",
    "* Remember to cover special corner cases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "__3. Profile it:__ \n",
    "* Don't assume, use a profiler. \n",
    "* Profile simple test cases to find the bottlenecks. Which functions take up a lot of time Computations? Disk I/O? \u000b",
    "Memory I/O?\n",
    "* Get a benchmark time to which you will compare how much you optimized your code\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "__4. Optimize it:__ \n",
    "* Only optimize the time consuming parts of the code you identified using the profiler. \n",
    "* Keep running your tests to make sure that they are still passing during and after optimization.\n",
    "* Stop optimizing as soon as possible."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Optimization workflow\n",
    "\n",
    "#### 1. Make it work\n",
    "#### 2. Make it work reliably\n",
    "#### 3. Profile it\n",
    "#### 4. Optimize it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Tools for profiling\n",
    "\n",
    "### Jupyter Notebook\n",
    "* Magic commands %%timeit\n",
    "* line_profiler and memory_profiler extentions\n",
    "\n",
    "### IDEs\n",
    "* Most IDEs have an integrated Profiler\n",
    "* In PyCharm, the profiler is only included in the Professional Version. &rarr; Register for the Eduction Program to use it\n",
    "\n",
    "### Command line\n",
    "* Use cProfile `python -m cProfile –o filename.prof myscript.py` and visualize the result using the package `snakeviz`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Profiling using line_profiler in PyCharm \n",
    "\n",
    "1. Open the Python console with IPython enabled. \n",
    "2. Load all necessary variables and functions in the console. \n",
    "3. Load the line_profiler: \n",
    "``` python\n",
    "%load_ext line_profiler\n",
    "```\n",
    "4. Example: Run line profiling for the \\_\\_init\\_\\_ function.\n",
    "``` python\n",
    "%lprun -f MyPolygon.__init__ test_coordinates()\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### The Agile Development Cycle\n",
    "\n",
    " <img src=\"./img/agile_cycle.png\" alt=\"agile_cycle\" width=400>\n",
    "    \n",
    "Source: [Pietro Berkes: Testing, Debugging, Profiling](https://github.com/ASPP/testing_debugging_profiling)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Exercise\n",
    "\n",
    "Take a look at the [GitHub Issues](https://github.com/geoscripting/03_scientific_programming/issues) of the main repository.\n",
    "\n",
    "1. __Pick an issue__ and use the agile development cycle to solve it. \n",
    "2. __Assign the issue to yourself.__ There can be several people assigned to an issue. In this way you know who else is wokring on it, so you know whom to ask if you want to discuss someting or ask questions.\n",
    "3. __Solve the issue__ by editing the python files. \n",
    "3. When you are done, __create a commit__ whose message contains the issue number. Push it to GitHub.\n",
    "\n",
    "` $ git commit -m \"added test for MyPolygon.envelope() #1\" `\n",
    "\n",
    "4. __Pick two more issues__ and solve them in the same way. Create commits for each one and push them to GitHub.\n",
    "\n",
    "5. __Create new issues:__ Come up with a new functionality for your class, propose new classes, report bugs, etc. Create a new issue describing it on the [GitHub Issues](https://github.com/geoscripting/03_scientific_programming/issues) page of the main repository.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Resources\n",
    "\n",
    "[ Jake Vanderplas: Videos on Reproducible Data Analysis in Jupyter](https://www.youtube.com/watch?v=_ZEWDGpM-vM&list=PLYCpMb24GpOC704uO9svUrihl-HY1tTJJ)\n",
    "\n",
    "[Jake VanderPlas: Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/01.07-timing-and-profiling.html)\n",
    "    \n",
    "[Pietro Berkes: Testing, Debugging, Profiling](https://github.com/ASPP/testing_debugging_profiling)\n",
    "\n",
    "[Software Design for Maintainability](http://gael-varoquaux.info/programming/software-design-for-maintainability.html)\n",
    "\n",
    "[Improving your programming style in Python](http://gael-varoquaux.info/programming/improving-your-programming-style-in-python.html)\n",
    "\n",
    "[From Python to Numpy](https://www.labri.fr/perso/nrougier/from-python-to-numpy/)\n",
    "\n",
    "[SciPy Lectures: Optimizing code](https://scipy-lectures.org/advanced/optimizing/index.html)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python (cs4geos)",
   "language": "python",
   "name": "cs4geos"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
