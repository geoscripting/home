{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vectorization: Pandas and GeoPandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pandas is based on numpy, therefore it provides vectorized computation as well. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&rarr; [Pandas User Guide: Accelerated Operations](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#accelerated-operations)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Vectorization in Pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To take a closer look at vectorized computation using Pandas, we will take a look at __Sofia Heisler's repository [PyCon 2017: Optimizing Pandas Code for Performance](https://github.com/s-heisler/pycon2017-optimizing-pandas)__. This repo contains the material of her talk which she gave at the PyCon Conference 2017.\n",
    "\n",
    "&rarr; Watch her talk on [YouTube](https://www.youtube.com/watch?v=HN5d490_KKk) I really recommend it (especially if you like panda GIFs)\n",
    "\n",
    "&rarr; Read her [blog post](https://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What we will do\n",
    "\n",
    "Confernece talks and tutorials on GitHub are a great way to stay up-to-date with current developments in the scientific Python world and great resource to learn. Therefore, we will:\n",
    "\n",
    "1. Fork her GitHub Repository, so that we have our own copy of it.\n",
    "2. Clone our copied GitHub Repository to our computer. \n",
    "3. Work through the notebook to learn about Pandas. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Vectorization in GeoPandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### GeoPandas is great ... but still a bit slow\n",
    "\n",
    "Geopandas make spatial analysis in Python a lot easier, but it has got a bottleneck: geometric opertions are performed using shapely, which - as we have seen - is not the fastest. In addition, operations along a series of shapely objects cannot be vectorized in Python. \n",
    "\n",
    "Do you know why? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Answer:__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### But the GeoPandas developers also found a solution for this problem: Yet another package - PyGEOS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The PyGEOS packages allows vectorized geometric calculations based on the C library GEOS. It is pretty new and still under development.\n",
    "\n",
    "&rarr; Take a look at the [PyGEOS User Guide](https://pygeos.readthedocs.io/en/latest/#)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### PyGEOS integration in GeoPandas\n",
    "The support of PyGEOS in GeoPandas is already partly implemented. So if pygeos is installed in your python environment you can enable the pygeos support. __But beware, it is still in development phase!__\n",
    "\n",
    "&rarr; Take a loot at the [changes in the geopandas code](https://github.com/geopandas/geopandas/pull/1154/commits/e0658280a54e8f8ad1e9023952671553c756230a)\n",
    "\n",
    "&rarr; Follow the development on GitHub: \n",
    "* [GeoPandas performance: optimizing vectorized operations](https://github.com/geopandas/geopandas/issues/430) \n",
    "* [Integrating pygeos in GeoPandas for vectorized array operations](https://github.com/geopandas/geopandas/issues/1155)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare the shapely vs. pygeos GeoPandas\n",
    "\n",
    "In order to use pygeos support in GeoPandas, you need to install pygeos. Unfortunately, there some conflicts with packages in our _advgeo_ environment. So in order to execute the following code you need to set up a new conda environment which has pygeos and geopandas installed. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Set up pygeos environment\n",
    "\n",
    "Setup a new conda environment and install the packages pygeos, geopandas and jupyter. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Start the jupyter notebook in this new environment and open this notebook again. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Run the comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scenario: Buffering locations of the DWD temperature stations\n",
    "\n",
    "As a case study we will perform a simple geometric operation: buffering the points of the DWD temperature measurement stations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path = \"./data/DWD_temperature_shp/DWD_temperature.shp\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Buffering using shapely\n",
    "In order to use shapely to perform the geometric operations, we need to disable the pygeos support of GeoPandas. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "gpd.options.use_pygeos = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_shapely = gpd.read_file(file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_shapely.to_crs(epsg=\"32632\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34.7 ms ± 1.7 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "data_shapely.buffer(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Buffering using PyGEOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "gpd.options.use_pygeos = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path = \"/Users/chludwig/Documents/UniHD/teaching/cs4geos/ss2020/geoscripting.github.io/source/course/01_advanced_vector_processing/data/DWD_temperature_shp/DWD_temperature.shp\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_pygeos = gpd.read_file(file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_pygeos.to_crs(epsg=\"32632\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19.9 ms ± 1.19 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "data_pygeos.buffer(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resources"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Introducing pygeos](https://caspervdw.github.io/Introducing-Pygeos/)\n",
    "\n",
    "[PyGEOS Documentation](https://pygeos.readthedocs.io/en/latest/)\n",
    "   \n",
    "\n",
    "[Cythonize Pandas](https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html)\n",
    "\n",
    "https://stackoverflow.com/questions/52673285/performance-of-pandas-apply-vs-np-vectorize-to-create-new-column-from-existing-c\n",
    "\n",
    "https://www.google.com/url?q=http://homepages.math.uic.edu/~jan/mcs275/running_cython.pdf&sa=U&ved=2ahUKEwiq_M3-vfrqAhWF-KQKHXBXCfwQFjAAegQICRAB&usg=AOvVaw0jX9BZrTt2aPsxKo30zmDb\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (pygeos)",
   "language": "python",
   "name": "pygeos"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
