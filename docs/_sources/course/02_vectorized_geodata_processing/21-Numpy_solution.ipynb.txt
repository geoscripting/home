{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vectorized Computation using Numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have just learned about the logical set-up of a computer and which factors affect the performance of it. Keeping this in mind, we will learn how we can improve the performance of our code in Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#accelerated-operations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## 1. Vectorization\n",
    "\n",
    "The motto of the EuroSciPy Conference 2018 was: _\"Vectorized is better than an explict loop\"_ \n",
    "\n",
    "![vectorized_tshirt](img/IMG_20190807_082235.jpg)\n",
    "\n",
    "What does that mean? Let's take a look back at the logical setup of a computer. \n",
    "\n",
    "![vectorized_setup](img/vectorization.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__Example:__ We want to add the values of two lists of integers. How would you do this?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "values1 = [1,2,3,4]\n",
    "values2 = [5,6,7,8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[6, 8]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[values1[0] + values2[0], values1[1] + values2[1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "663 ns ± 17.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit \n",
    "result = []\n",
    "for v1, v2 in zip(values1, values2):\n",
    "    #v_sum =  \n",
    "    #print(v1, v2, v_sum)\n",
    "    result.append(v1 + v2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__Exercise:__ Let's try this with bigger data. Create a list of integers of length 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "nvals = 1000\n",
    "values1 = list(range(0, nvals))\n",
    "values2 = list(range(0, nvals))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "def loop_sum(values1, values2):\n",
    "    result = []\n",
    "    for v1, v2 in zip(values1, values2):\n",
    "        result.append(v1 + v2)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "110 µs ± 3.67 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "res = loop_sum(values1, values2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Numpy for vectorized computations\n",
    "Numpy is a library that introduces vectorized computations in Python. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values1[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "np_values1 = np.array(values1)\n",
    "np_values2 = np.array(values2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(np_values2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "You can extract certain values by indexing it just like with lists. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np_values1[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Let's implement the function above using numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "def vectorized_sum(vals1, vals2):\n",
    "    # alternativ geht auch \n",
    "    #return vals1 + vals2\n",
    "    return np.add(vals1, vals2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.05 µs ± 44.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit \n",
    "res = vectorized_sum(np_values1, np_values2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Compare the execution times of \"loops\" vs. \"vectorized\" function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "469 ns ± 19.2 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "553 ns ± 6.39 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "540 ns ± 16.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "598 ns ± 23.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "737 ns ± 6.19 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "577 ns ± 27.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "1.12 µs ± 23 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "566 ns ± 5.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "1.88 µs ± 17.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "565 ns ± 6.77 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "3.35 µs ± 59.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n",
      "565 ns ± 5.89 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "6.75 µs ± 367 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n",
      "618 ns ± 19.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "13.8 µs ± 297 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n",
      "724 ns ± 41.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "27.5 µs ± 769 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n",
      "728 ns ± 24.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "57.2 µs ± 2.95 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n",
      "873 ns ± 50.8 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n"
     ]
    }
   ],
   "source": [
    "loop_times = []\n",
    "vectorized_times = []\n",
    "length_of_list = []\n",
    "for exponent in range(0, 10, 1):\n",
    "    nvals = 2 ** exponent\n",
    "    length_of_list.append(nvals)\n",
    "    values1 = list(range(0, nvals))\n",
    "    values2 = list(range(0, nvals))\n",
    "    np_values1 = np.array(values1)\n",
    "    np_values2 = np.array(values2)\n",
    "    result = %timeit -o loop_sum(values1, values2)\n",
    "    loop_times.append(result.average)\n",
    "    result = %timeit -o vectorized_sum(np_values1, np_values2)\n",
    "    vectorized_times.append(result.average)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Execution time')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(length_of_list, loop_times)\n",
    "plt.plot(length_of_list, vectorized_times)\n",
    "plt.legend([\"for\", \"vectorized\"])\n",
    "plt.title(\"Average execution times\")\n",
    "plt.xlabel(\"Length of list/array\")\n",
    "plt.ylabel(\"Execution time\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Take-Home Message\n",
    "\n",
    "__Try to get rid of for loops!__\n",
    "\n",
    "__When ever you are performing the same calculation on multiple data, use vectoried functions!__ \n",
    "Numpy is a very powerful library for that and has many functions implemented in a very efficient way, partly in C.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vectorization in Pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remeber that the package Pandas is built on Numpy. So every Pandas.DataFrame is basically a numpy.array with additional row and column anmes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({\"pop\": [1,2,3,4,5,6,7,5,4,6,78,44,5,33,5,6,7], \n",
    "                  \"area\": [1,2,3,4,5,6,7,5,4,6,78,44,5,33,5,6,7]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Intuitively you might want to use a for loop to iterate over the rows. Something like this: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.31 ms ± 4.52 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "for i, d in df.iterrows():\n",
    "    d[\"pop\"] * d[\"area\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is however a bad idea, because you are not making use of the built-in vectorized functions provided by numpy: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "116 µs ± 1.42 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "df[\"pop\"] * df[\"area\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the vectorized calculation, the execution is 10 times faster!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For more complex functions you will have use the `.DataFrame.apply` or `Series.map` methods. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[1, \"pop\"] = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        1.0\n",
       "1      -99.0\n",
       "2        9.0\n",
       "3       16.0\n",
       "4       25.0\n",
       "5       36.0\n",
       "6       49.0\n",
       "7       25.0\n",
       "8       16.0\n",
       "9       36.0\n",
       "10    6084.0\n",
       "11    1936.0\n",
       "12      25.0\n",
       "13    1089.0\n",
       "14      25.0\n",
       "15      36.0\n",
       "16      49.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.apply(lambda x: -99 if np.isnan(x[\"pop\"]) else x[\"pop\"] * x[\"area\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.27 ms ± 70.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "df.apply(lambda x: 0 if np.isnan(x[\"pop\"]) else x[\"pop\"] * x[\"area\"], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However there is still an overhead involved when using pandas.DataFrames compared to numpy.array, since the metadata (e.g. index, columns, dtype) of the data frame have to be stored as well. When setting `raw=True` the `apply` as applied to a numpy array instead of the series. This means the column names are gone but it is a lot faster. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.29 ms ± 13.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "df.apply(lambda x: -99 if np.isnan(x[0]) else x[0] * x[1], axis=1, raw=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resources"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Cythonize Pandas](https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html)\n",
    "\n",
    "https://stackoverflow.com/questions/52673285/performance-of-pandas-apply-vs-np-vectorize-to-create-new-column-from-existing-c\n",
    "\n",
    "https://www.google.com/url?q=http://homepages.math.uic.edu/~jan/mcs275/running_cython.pdf&sa=U&ved=2ahUKEwiq_M3-vfrqAhWF-KQKHXBXCfwQFjAAegQICRAB&usg=AOvVaw0jX9BZrTt2aPsxKo30zmDb\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Vectorization in GeoPandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygeos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "gpd.use_pygeos = False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Compare ogr and Geopandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "iterate over features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resources\n",
    "\n",
    "https://caspervdw.github.io/Introducing-Pygeos/\n",
    "\n",
    "[PyGEOS Documentation](https://pygeos.readthedocs.io/en/latest/)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## 2. Basics of Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Generating Numpy Arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int16)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values = np.arange(0, 10, 1, dtype=\"int16\")\n",
    "values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndzeros = np.zeros(10)\n",
    "ndzeros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndone = np.ones(10)\n",
    "ndone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([26,  2,  8, 83, 59, 80, 55, 19, 30, 72])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_ints = np.random.randint(0, 100, 10)\n",
    "random_ints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.22550162, 0.19518921, 0.18987695, 0.98540563, 0.62319535,\n",
       "       0.86390692, 0.44673619, 0.63848026, 0.19672036, 0.22730732])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_float = np.random.random(10)\n",
    "random_float"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Slicing an Array = Extracting a range of values from a numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int16)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 6, 7, 8, 9], dtype=int16)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values[5:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7], dtype=int16)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values[:-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 2, 4, 6, 8], dtype=int16)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values[::2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Replacing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0, 99,  2,  3,  4,  5,  6,  7,  8,  9], dtype=int16)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values[1] = 99\n",
    "values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([88, 88,  2,  3,  4,  5,  6,  7,  8,  9], dtype=int16)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values[:2] = [88, 88]\n",
    "values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True, False, False, False, False,  True,  True,  True,\n",
       "        True])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values > 5 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 5, 2, 3, 4, 5, 5, 5, 5, 5], dtype=int16)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values[values > 5] =  5\n",
    "values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Vectorized Calculations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2262,  152,  520, 4150, 3363, 6080, 1265, 1235, 1290, 3384])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_ints2 = np.random.randint(0, 100, 10)\n",
    "result = random_ints * random_ints2\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "np.array([1,2,3]).min()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Multi-Dimensional Arrays\n",
    "Numpy array can also be multidimensional. A 2D array with 10 rows and 5 columns can be created like this using the `reshape()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
       "       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n",
       "       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr1D = np.arange(0, 50, 1)\n",
    "arr1D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "hidden": true,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3,  4],\n",
       "       [ 5,  6,  7,  8,  9],\n",
       "       [10, 11, 12, 13, 14],\n",
       "       [15, 16, 17, 18, 19],\n",
       "       [20, 21, 22, 23, 24],\n",
       "       [25, 26, 27, 28, 29],\n",
       "       [30, 31, 32, 33, 34],\n",
       "       [35, 36, 37, 38, 39],\n",
       "       [40, 41, 42, 43, 44],\n",
       "       [45, 46, 47, 48, 49]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D = arr1D.reshape(10, 5)\n",
    "arr2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3,  4],\n",
       "       [ 5,  6,  7,  8,  9],\n",
       "       [10, 11, 12, 13, 14],\n",
       "       [15, 16, 17, 18, 19],\n",
       "       [20, 21, 22, 23, 24],\n",
       "       [25, 26, 27, 28, 29],\n",
       "       [30, 31, 32, 33, 34],\n",
       "       [35, 36, 37, 38, 39],\n",
       "       [40, 41, 42, 43, 44],\n",
       "       [45, 46, 47, 48, 49]])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D = np.arange(0,50, 1).reshape(10, 5)\n",
    "arr2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "hidden": true,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x11faa1518>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALcAAAD4CAYAAACuYHcmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAPA0lEQVR4nO3dXYxd1XnG8f/j+fAEf9S4ThOCnUAlFIEqNVQW0FiqUgiKCxbJBZVIGiutqLgJramoaJKbqFIuEqlK6EVUySK0SEFQBK6CUBSKEqMqauVgMA0fTgp1WxhwYghQU+pgzzlvL/Y2HZvxnHU8a5+z9zrPT9qSz5njNS/DM8trr7X3XooIzEq0atwFmDXF4bZiOdxWLIfbiuVwW7Gmm2h0VqtjjjX5G5bytwloVQPtqqF+o4GfwbHeUY73jq2o4U/87pr4xWu9pM8+/uO3H46I7Sv5fikaCfcca7hcV2VvV6tXZ28TYFUT7TZUq1bPZm/zn392z4rb+MVrPX708AeTPjt13nObVvwNEzQSbps8AfTpj7uMUzjclkUQnIi0YcmoONyWjXtuK1IQ9Fp2KYfDbdn0cbitQAH0WhbupMlYSdsl/VTS85K+0HRR1k19IukYlYE9t6Qp4JvA1cA88JikByPi2aaLs+4I4ETLxtwpPfdlwPMRcSgijgP3Ap9stizrmiDoJR6jkjLmPh94cdHreeDy0z8k6SbgJoA5zslSnHVIQK9dHXdSuJe65uBd/xkRsRvYDbBeG1v2n2lNq1Yo2yUl3PPAlkWvNwMvN1OOdZfoLdkPjk9KuB8DLpJ0IfAScAPwmUarss6pTig7Fu6IWJB0M/AwMAXcGRHPNF6ZdUo1z92xcANExHeB7zZci3Vcv2s9t1mKzvbcZoMEoteyuxYdbsvGwxIrUiCOx9S4yziFw21ZVIs4EzAs0epZpj54Yf6GZ2fytwnEbP4fQ3+2mV6svzp/rfF6njZ9QmlFihC9mICe2yZT3z23lag6oWxXnNpVjXXWxJxQ2mTqeZ7bSuQVSita37MlVqLqwimH2woUiBNefrcSReBFHCuVvIhjZQrcc1vBfEJpRQrkmxWsTNWjHfLFqX5G5X7gpYjYUT9a5F5gI/AEsLN+vN8ZtevfEeuw6qE8KUeiXcDBRa+/BnwjIi4CXgduHNSAw21ZBNUKZcoxiKTNwLXAHfVrAVcC99cfuQv41KB2PCyxbIbolTdJ2r/o9e76WZMn3Q7cBqyrX/8q8EZELNSv56ke0Losh9uyiNAw15a8GhFbl/qCpB3AkYh4XNLHTr691Lcc9E0cbsuiOqHMsvy+DbhO0jXAHLCeqiffIGm67r2THsbqMbdlUt1DmXIsJyK+GBGbI+ICqoeu/iAi/gDYC1xff+xzwHcGVdRIz92fnebtD23M3m5vtpnfxf5s/vnZ/kwzc769BmrtPb3yn2t1QtnoPPdfAPdK+gpwAPjWoL/gYYllk3uFMiIeBR6t/3yIagubZA63ZeEVSiuabxC2IkXAib7DbQWqhiUOtxXKzwq0Io1gKnBoA/8dkbRF0l5JByU9I2nXKAqzrlG2C6dySem5F4BbI+IJSeuAxyU94r3f7XSdu4cyIg4Dh+s/vynpINUVWQ63vaOaLenwox0kXQBcCuxb4mvv7P2+em5DhtKsS9q4iJM8AJK0FngAuCUijp7+9YjYHRFbI2LrzMyanDVaR/TrxzsMOkYlqeeWNEMV7LsjYk+zJVkXtXG2ZGC461t8vgUcjIivN1+SdVUXF3G2ATuBpyQ9Wb/3pXrLbDOguhNnoWvhjogfsvRtPman6NywxCxFJ8fcZqkcbitSG+e5HW7LpnPL72ejPyve3Dybv91mdsdupN0mbuSFZmrN0WYELPhmBSuVhyVWJI+5rWjhcFupJuKE0iZPhMfcVizR82yJlcpjbiuSry2xckU17m4Th9uy8WyJFSl8Qmkl87DEiuXZEitShMNtBfNUoBWrbWPudp3eWmcFot9flXQMImlO0o8k/Wv9ZOG/rN+/UNI+Sc9J+ntJy94R43BbNpF4JHgbuDIifhP4CLBd0hXA14BvRMRFwOvAjcs14nBbHvUJZcoxsKnK/9QvZ+ojgCuB++v37wI+tVw7Drflk951b5K0f9Fx0+lNSZqqn3B2BHgE+HfgjXp7bIB5qkdpn5FPKC2bIaYCX42Ircu3FT3gI5I2AP8AXLzUx5Zro5m732fgrQ/knxaKhn4V+zP5T/P7s81MHfSnG6g1x93vQL/fwP/ziDckPQpcAWyQNF333puBl5f7ux6WWB4BhNKOASS9t+6xkfQe4OPAQWAvcH39sc8B31muHQ9LLJuM89znAXdJmqLqgO+LiIckPQvcK+krwAGqR2ufkcNt+WQKd0T8mGp7mtPfPwRcltqOw22ZpE3zjZLDbfm0bPnd4bY8AqKB2ZKVcLgto3aFe5it+qYkHZD0UJMFWYdlvLgkh2HmuXdRzTWaLa2L4Za0GbgWuKPZcqyzMi7i5JI65r4duA1Yd6YPLN4ee3r9uSuvzDqnczcrSNoBHImIx5f73OLtsafP8fbYE6mvtGNEUjdZvU7SNcAcsF7StyPis82WZl2jrvXcEfHFiNgcERcANwA/cLDtXVJPJkf4C+B5bstktCeLKYYKd0Q8CjzaSCXWfS0blrjntnz64y7gVA635XFynrtFHG7Lpm2zJQ635dOycPseSitWY3e/H3t//rOLmGnojKWBu9/VUK2rmmg3U5selliZgpEuradwuC0f99xWKg9LrFwOtxXL4bYSKTwssZJ5tsRK5Z7byuVwW5E85raiOdxWKrXsZgVfFWjFcs9t+XhYYkXyCaUVrWXh9pjb8sn0UB5JWyTtlXSw3vt9V/3+RkmP1Hu/PyJp2YdSOtyWhahmS1KOBAvArRFxMdX+k5+XdAnwBeD79d7v369fn5HDbXnE/188NegY2FTE4Yh4ov7zm1TPhT8f+CTVnu+QsPe7x9yWT/qYe5Ok/Yte746I3Ut9UNIFVNv27QPeFxGHofoFkPRry30Th9vySQ/3wL3fASStBR4AbomIo9JwVx02Em7N9Jl5//9mb3dmppe9TYDVMyeytzk3s5C9TYC56fztvpLp55pzKlDSDFWw746IPfXbP5d0Xt1rnwccWa4Nj7ktn3yzJaLa+vpgRHx90ZcepNrzHbz3u41MZL22ZBuwE3hK0pP1e18CvgrcJ+lG4AXg95drxOG2fPLt/f5Dzryp5VWp7Tjclo2X361cDrcVacT73aRwuC0L0b5hSeoOwhsk3S/pJ/XFLL/ddGHWPbmW33NJ7bn/GvheRFwvaRY4p8GarKta1nMPDLek9cDvAH8IEBHHgePNlmWd1LJwpwxLfh14BfhbSQck3SHpXftfS7pJ0n5J+3tH38peqLVcxqsCc0kJ9zTwW8DfRMSlwFsscR3t4r3fp9Z77/eJ1LIdhFPCPQ/MR8S++vX9VGE3O0XGmxWySNn7/WfAi5I+XL91FfBso1VZJ7VtWJI6W/InwN31TMkh4I+aK8k6qauLOBHxJDDw4nKbcF0Mt9kgbVyhdLgtG/XblW6H2/Lo6pjbLIWHJVauSQj36pkFLnrfK9nbXTvzdvY2AdZM5b9UZs10M7Wuncrf7k8y1eqe28rlcFuR8t79noXDbVl4ntvKFu1Kt8Nt2bjntjJ5EcdK5hNKK5bDbWUKfEJp5fIJpZXL4bYSeRHHyhXhmxWsYO3KtsNt+XhYYmUKoGXDEu9mZvnk283sTklHJD296L2h9n0Hh9syyvjEqb8Dtp/23lD7voPDbRmpH0nHIBHxT8Brp7091L7v4DG35TLcVYHJe78vMtS+79BQuNdOvc1HNx7K3u6vTOffchtg3apj2dtcP/XL7G1CM7XuydBmtYiTnO6kvd9XysMSy6efeJydn9f7vZOy7zs43JaRIpKOszTUvu/gcFsuqdOAaVOB9wD/AnxY0ny91/tXgaslPQdcXb9elk8oLZN815ZExKfP8KXkfd/B4bacfLOCFckP5bGitaznTt0e+88kPSPpaUn3SJprujDroK5t1SfpfOBPga0R8RvAFHBD04VZ96jfTzpGJXVYMg28R9IJqn3fX26uJOukYCULNI1I2YfyJeCvgBeAw8B/R8Q/nv65xdtjv/W6t4afNCJtAWcFizhDSxmWnEt1RdaFwAeANZI+e/rnFm+Pvebc2fyVWvtFpB0jknJC+XHgPyLilYg4AewBPtpsWdZJLQt3ypj7BeAKSecAx6hWifYv/1ds4rRwzD0w3BGxT9L9wBPAAnAAGHTtrU2gUc6EpEjdHvvLwJcbrsU6bbRDjhReobQ8/CBMK1q7RiUOt+UzyjnsFA635eNwW5EioNeucUkj4V4/dYxPrHsqe7vrVp3I3ibAugYecrduVTP9xtpV+S/IXJ/rZkP33FYsh9uK1MIHYTrclklATMCY2yZQMBknlDahPOa2YjncViZfOGWlCqCLl7yaJXHPbWWakOV3m0AB4XluK5ZXKK1YHnNbkSI8W2IFc89tZQqi1xt3EadwuC0PX/JqRWvZVKB3M7MsAoh+JB0pJG2X9FNJz0sauM/7UhxuyyPqmxVSjgEkTQHfBH4PuAT4tKRLhi3JwxLLJuMJ5WXA8xFxCEDSvVSP0X52mEYUDUzfSHoF+K+Ej24CXs1eQHO6VO8wtX4oIt67km8m6Xv190wxB/xy0evdEfHOw1UlXQ9sj4g/rl/vBC6PiJuHqamRnjv1ByVp/yg2uM+lS/WOutaI2J6xOS31LYZtxGNua6N5YMui15s5i32YHG5ro8eAiyRdKGmWave8B4dtZNwnlF17iH2X6u1SraeIiAVJNwMPU20NeWdEPDNsO42cUJq1gYclViyH24o1tnDnWF4dBUlbJO2VdFDSM5J2jbumFJKmJB2Q9NC4axmXsYQ71/LqiCwAt0bExcAVwOdbXOtiu4CD4y5inMbVc7+zvBoRx4GTy6utExGHI+KJ+s9vUgXm/PFWtTxJm4FrgTvGXcs4jSvc5wMvLno9T8sDAyDpAuBSYN94KxnoduA2WrcF02iNK9xZlldHSdJa4AHglog4Ou56zkTSDuBIRDw+7lrGbVzhzrK8OiqSZqiCfXdE7Bl3PQNsA66T9J9Uw70rJX17vCWNx1gWcSRNA/9GtY/8S1TLrZ85m1WopkkScBfwWkTcMu56hiHpY8CfR8SOcdcyDmPpuSNiATi5vHoQuK+Nwa5tA3ZS9YBP1sc14y7KBvPyuxXLK5RWLIfbiuVwW7EcbiuWw23FcritWA63Fev/APF+3kKDInTDAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(arr2D)\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 5)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 6],\n",
       "       [11]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D[1:3,1:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2.,  7., 12., 17., 22., 27., 32., 37., 42., 47.])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D.mean(axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Numpy Exercises:\n",
    "Let's do some exercises to get familiar with Numpy. If you don't know the required function, type np. and press TAB to display availabel functions. If you have found the right function, but you don't know the required parameters, check the docstring of the function by putting the cursor on the function name and press SHIFT + Tab to get the docstring.\n",
    "\n",
    "__You can find the solutions and a lot more numpy exercises in this [repo](https://github.com/rougier/numpy-100).__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__1. Create a vector with values ranging from 10 to 49__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__2. Calculate the square root of each element of the array above.__ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__3. Create a null vector of size 10 but the fifth value which is 1.__ \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__4. Create a random vector of size 30 and find the minimum and maximum value.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__5. Bonus: Create a 3x3 matrix with values ranging from 0 to 8.__ Hint: Take a look at `np.reshape()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__6. Bonus: Create a 10x10 array with random values and find the mean value of each row.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__7. What are the results of the following expressions?__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "#print(0 * np.nan)\n",
    "#print(np.nan == np.nan)\n",
    "#print(np.inf > np.nan)\n",
    "#print(np.nan - np.nan)\n",
    "#print(np.nan in set([np.nan]))\n",
    "#print(0.3 == 3 * 0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__8. Create a 8x8 matrix and fill it with a checkerboard pattern__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "__9. What is the output of__ `print(b[0, 0], b[0, 1], b[1, 0])`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 3)\n"
     ]
    }
   ],
   "source": [
    "b = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "print(b.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Spatial Locality"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A puzzling problem\n",
    "\n",
    "__Example:__ Let's create an 2 dimensional array with random numbers with 10000 rows and 10000 columns. Then we calculate the mean along the rows and along the columns. We will measure the computation time of each cell using the magic command `%%timeit`. What do you observe? Can you explain the result?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "arr_big = np.random.random(100000000).reshape(10000, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.4 ms ± 4.36 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "np.mean(arr_big, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.4 ms ± 2.04 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "np.mean(arr_big, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the way arrays are stored in pyhsical memory might help us explain this phenomenon. \n",
    "\n",
    "![spatial_locality](img/row-major-order.png)\n",
    "![spatial_locality_example1](img/spatial_locality_example.png)\n",
    "![spatial_locality_example2](img/spatial_locality_example2.png)\n",
    "![spatial_locality_example3](img/spatial_locality_example3.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default numpy arrays are stored in C order (row-major), not in F order (column-major). Therefore, calculations along the rows (axis=1) are faster than along the columns (axis=0). So calculating the mean of each row is faster than the mean of each column if the numpy array is stored as default in C order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "arr2D = np.arange(0, 50, 1).reshape(10, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 5)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A multi-dimensional array can be converted to a 1D array using the function `ravel()` with the option to specify C or F order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3,  4],\n",
       "       [ 5,  6,  7,  8,  9],\n",
       "       [10, 11, 12, 13, 14],\n",
       "       [15, 16, 17, 18, 19],\n",
       "       [20, 21, 22, 23, 24],\n",
       "       [25, 26, 27, 28, 29],\n",
       "       [30, 31, 32, 33, 34],\n",
       "       [35, 36, 37, 38, 39],\n",
       "       [40, 41, 42, 43, 44],\n",
       "       [45, 46, 47, 48, 49]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
       "       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n",
       "       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D.ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  5, 10, 15, 20, 25, 30, 35, 40, 45,  1,  6, 11, 16, 21, 26, 31,\n",
       "       36, 41, 46,  2,  7, 12, 17, 22, 27, 32, 37, 42, 47,  3,  8, 13, 18,\n",
       "       23, 28, 33, 38, 43, 48,  4,  9, 14, 19, 24, 29, 34, 39, 44, 49])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D.ravel(order=\"F\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Advanced: Numpy Strides\n",
    "\"Strides are the number of bytes to jump-over in the memory in order to get from one item to the next item along each direction/dimension of the array. In other words, it's the byte-separation between consecutive items for each dimension.\" [Stack Overflow](https://stackoverflow.com/questions/53097952/how-to-understand-numpy-strides-for-layman)\n",
    "\n",
    "__Example:__ For an array of size 10(cols) * 5(rows) stored in C order this would be:\n",
    "\n",
    "column stride: 64bits * 5 cells / 8 bits = 40 bytes \n",
    "\n",
    "row stride: 64bits * 1 cell / 8 bits = 8 bytes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40, 8)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2D.strides"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8, 80)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.asfortranarray(arr2D).strides"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise:\n",
    "__Calculate the strides for an F ordered array with 35 columns and 14 rows by hand and then check result using numpy.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FYI: Lists and spatial locality\n",
    "Arrays are better than lists for continous reading of data, because lists usually only store pointers to variables stored in memory, not the variable values themselves. This can lead to bad spatial locality when reading the data, because the data might be spread all over the memory.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dtypes of ndarray and how their sizes change\n",
    "Working with raster data can be very memory intensive especially if you are working with time series analysis. By default a new numpy array has the type float 64bit. Oftentimes this is more than you really need. Therefore, you should choose the data types of your numpy arrays wisely! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr = np.random.random(100).reshape(10, 10)\n",
    "arr.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zeros = np.zeros(100)\n",
    "zeros.dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercise:__ Print the data type (`.dtype`) and the size in number of bytes (`.nbytes`) of the array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "800"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.nbytes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercise:__ Convert the `arr` to 16 bit integer (\"int16\") using the method `.astype()` and print the size of the variable again. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "arr = arr.astype(\"int16\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.nbytes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercises:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__1. How big is an array of size 1000*1000 with these data types in Python in Megabytes?__\n",
    "1. Bool\n",
    "2. 8 bit integer\n",
    "3. 32 bit float\n",
    "4. 64 bit float\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__2. Create an array of size 1000 * 1000 filled with zeros. Calculate its size in Megabytes and check the data type. Can you make it more memory efficient?__ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "* You should be able now to explain the sentence \"vectorized is better than an explicit loop\".\n",
    "* When performing calculations you should also consider the way the arrays are stored in memory (row or column major). \n",
    "\n",
    "For more on numpy, check out     https://github.com/mingrammer/cs231n-numpy-tutorial/blob/master/numpy_tutorial.ipynb\n",
    "\n",
    "Generally, the book by Schmidt, B. et al. (2017) *Parallel programming: concepts and practice* is a very good source for learning more about the numpy and efficient computation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### References:\n",
    "\n",
    "__Micha Gorelick, Ian Ozsvald. High Performance Python. O'Reilly, 2014. (Safari Books)__ (very good)\n",
    "\n",
    "Schmidt, B., Gonzalez-Dominguez, J., Hundt, C., & Schlarb, M. (2017). Parallel programming: concepts and practice. Morgan Kaufmann. [Google Books](https://books.google.de/books?hl=en&lr=&id=-y9HDgAAQBAJ&oi=fnd&pg=PP1&dq=Parallel+Programming:+Concepts+and+Practice&ots=vPL3kPvTkJ&sig=gN5EA0okkbtUHufPvTB37MAGFis)\n",
    "\n",
    "Spatial locality explained: http://www.tophatstuff.co.uk/index.html@p=119.html\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
