{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Writing good scientific Code\n",
    "### for Readability, Maintainability and Reusability "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## What is the difference between a Software Developer and a Scientific Programmer?\n",
    "\n",
    "What are their respective goals? \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: complicated list comprehension vs. explicit loop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: find the error in a complicated list comprehension or a foor loop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "In this exercise we will try to maximize the __readability, maintainability and reusability__ of our code. Forget about efficiency for a moment. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "### Remember: Write code for people, not computers!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "So don't just write down instructions, instead:\n",
    "\n",
    "### Write code that reveals its meaning!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# How to write readable, maintainable and reusable code?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "As a general tipp, stick to the __Style Guide for Python__ ([PEP8](https://www.python.org/dev/peps/pep-0008/)) \n",
    "\n",
    "&rarr; `pylint my_program.py` will check your code for compliance with PEP8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "There are __no strict rules__ and it depends on __your preferences__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "## Here are __some guidelines__ ..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Naming variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "## Use intention revealing names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "x = 1\n",
    "y = 5\n",
    "y = x + y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "apples = 1\n",
    "pears = 5\n",
    "fruit = apples + pears"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "d = 30 # elapsed time in days\n",
    "elapsed_time_in_days = 30"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "## Beware of using names which vary in small ways"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "XYZControllerForEfficientHandlingOfStrings = 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "XYZControllerForEfficientStorageOfStrings = 12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Use pronounceable names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "genymdhms = 19830101\n",
    "modymdhms = 20000412"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "generation_timestamp = 19830101\n",
    "modification_timestamp = 20000412"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "## Be consistent\n",
    "Don't mix different forms of formatting, or naming styles (CamelCase vs. snake_case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "elapsedTimeInDays = 30 # CamelCase\n",
    "elapsed_time_in_days = 30 # snake_case"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Naming classes\n",
    "\n",
    "Use __noun or noun phrase names__ like Customer, WikiPage, Account, and AddressParser. (CamelCase) \n",
    "A class name should not be a verb."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "## Naming functions\n",
    "\n",
    "Use __verb or verb phrase__ names like post_payment, delete_page, or save.\n",
    "\n",
    "In __Python__: Function names should be __lowercase__ with __words separated by underscores__ as necessary to improve readability. (snake_case)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Split your code into Functions \n",
    "Remeber confusing functions like this? Nobody wants to see this when they are having a first glance at a program. Wrap them into functions that you call form within the main program."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "def does_something_complicated(seq, sub):\n",
    "    target = np.dot(sub, sub)\n",
    "    candidates = np.where(np.correlate(seq, sub, mode='valid') == target)[0]\n",
    "    check = candidates[:, np.newaxis] + np.arange(len(sub))\n",
    "    mask = np.all((np.take(seq, check) == sub), axis=-1)\n",
    "    return candidates[mask]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Don't repeat yourself!\n",
    "Wrap operations that are done several times in a function. Saves you time and makes your code more robust, because you are less likely to introduce inconsistencies, when make changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "band1 = np.array([1.,4.,6., -99.])\n",
    "band2 = np.array([4., -99., 5., -99])\n",
    "\n",
    "band1 = np.where(band1 == -99, np.nan, band1)\n",
    "band2 = np.where(band2 == -99, np.nan, band1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "def mask_invalid_values(band):\n",
    "    np.where(band == -99, np.nan, band)\n",
    "mask_invalid_values(band1)\n",
    "mask_invalid_values(band2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### \"Do One thing\"\n",
    "Every function should only do ONE job, not several ones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "def add_fruit(apples, pears):\n",
    "    fruit = apples + pears\n",
    "    with open(file, \"w\") as src:\n",
    "        src.write(fruit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "def add_fruit(apples, pears):\n",
    "    fruit = apples + pears\n",
    "    return fruit\n",
    "\n",
    "def save(fruit, output_file):\n",
    "    with open(output_file, \"w\") as src:\n",
    "        src.write(fruit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Split your code into Packages and Modules\n",
    "Module: Python __file__ that contain functions and classes \n",
    "\n",
    "package: A __folder__ that contains modules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Your project folder may look something like this:\n",
    "\n",
    " __my_python_project__\n",
    "\n",
    " &nbsp;&nbsp;&nbsp;&nbsp;   __main.py__\n",
    " \n",
    " &nbsp;&nbsp;&nbsp;&nbsp;  \\__init\\__.py           &nbsp;&nbsp;&larr; empty file, but needed for import in Python  \n",
    "\n",
    " &nbsp;&nbsp;&nbsp;&nbsp;    __project_utils.py__              &nbsp;&nbsp;&nbsp;&larr; this is a module\n",
    "\n",
    " &nbsp;&nbsp;&nbsp;&nbsp;    __general_utils.py__             &nbsp;&nbsp;&larr; this is a module\n",
    " \n",
    " &nbsp;&nbsp;&nbsp;&nbsp;    __other_utils__             &nbsp;&nbsp;&larr; this is a package\n",
    " \n",
    " &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  \\__init__.py             &nbsp;&nbsp;&larr; empty file, but needed for import in Python\n",
    " \n",
    " &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;   __some_functions_and_classes.py__             &nbsp;&nbsp;&larr; this is a module\n",
    " \n",
    " &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;   __some_other_functions.py__             &nbsp;&nbsp;&larr; this is a module\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Main Program File\n",
    "Your main program file shows the __general structure of the program__ (it contains the \"plot\" of your program)\n",
    "\n",
    "*Which objects and processes are involved, what is happening?*\n",
    "\n",
    "This is the file that is being __executed to start your program__. \n",
    "\n",
    "You can use a normal __Python file__ or a __Jupyter Notebook__ for this."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Modularisation\n",
    "Store functions and classes in modules and packages."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "To increase the __reusability__ of your code __store project specific and non-project specific functions__ in two different modules:\n",
    "\n",
    "* __project_utils.py:__ project specific functions only used in this project\n",
    "\n",
    "* __general_utils.py:__ general purpose functions that you also use in other projects"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Use Pseudo code to design your program\n",
    "When start out writing a program, you may write some __pseudo code first to design the general structure of your program__. [Here](https://www.geeksforgeeks.org/how-to-write-a-pseudo-code/) are some tipps."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "### Do's\n",
    "* Use __control structures__ (if ... else, for, ...)\n",
    "* Use __naming conventions__\n",
    "* Use __indentation__\n",
    "* Keep it __simple__ and __consise__\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "### Don't\n",
    "* Don't make the pseudo code abstract\n",
    "* Don't be too generalized\n",
    "* Don't describe the implementation, describe the meaning of the code parts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Example:\n",
    "\n",
    "if \"1\"\n",
    "\n",
    "    print response\n",
    "    \n",
    "        \"I am case 1\"\n",
    "\n",
    "if \"2\"\n",
    "\n",
    "    print response\n",
    "    \n",
    "        \"I am case 2\"\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Let's look at an Example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "## 1-Dimensional Random Walker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "scrolled": false,
    "slideshow": {
     "slide_type": "-"
    },
    "tags": [
     "remove_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(walker.positions) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## How readable is this code?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "import random \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "  \n",
    "# Probability to move up or down \n",
    "prob = [0.05, 0.95]   \n",
    "  \n",
    "# statically defining the starting position \n",
    "start = 2  \n",
    "positions = [start] \n",
    "  \n",
    "# creating the random points \n",
    "rr = np.random.random(1000) \n",
    "downp = rr < prob[0] \n",
    "upp = rr > prob[1] \n",
    "  \n",
    "for idownp, iupp in zip(downp, upp): \n",
    "    down = idownp and positions[-1] > 1\n",
    "    up = iupp and positions[-1] < 4\n",
    "    positions.append(positions[-1] - down + up) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import random \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "  \n",
    "prob = [0.05, 0.95]   \n",
    "  \n",
    "start = 2  \n",
    "positions = [start] \n",
    "  \n",
    "rr = np.random.random(1000) \n",
    "downp = rr < prob[0] \n",
    "upp = rr > prob[1] \n",
    "  \n",
    "for idownp, iupp in zip(downp, upp): \n",
    "    down = idownp and positions[-1] > 1\n",
    "    up = iupp and positions[-1] < 4\n",
    "    positions.append(positions[-1] - down + up) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "## How can we improve it?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Use meaningful variable names ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import random \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "threshold_walk_down = 0.05\n",
    "threshold_walk_up = 0.95\n",
    "\n",
    "start_position = 2\n",
    "positions = [start_position]\n",
    "\n",
    "probabilities = np.random.random(1000)\n",
    "walk_downs = probabilities < threshold_walk_down\n",
    "walk_ups = probabilities > threshold_walk_up\n",
    "\n",
    "for i_walk_down, i_walk_up in zip(walk_downs, walk_ups):\n",
    "    down = i_walk_down and positions[-1] > 1\n",
    "    up = i_walk_up and positions[-1] < 4\n",
    "    positions.append(positions[-1] - down + up) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Make the code more explicit ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import random \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "threshold_walk_down = 0.05\n",
    "threshold_walk_up = 0.95\n",
    "\n",
    "start_position = 2\n",
    "positions = [start_position]\n",
    "\n",
    "walk_probabilities = np.random.random(1000)\n",
    "walk_downs = walk_probabilities < threshold_walk_down\n",
    "walk_ups = walk_probabilities > threshold_walk_up\n",
    "\n",
    "positions = [start_position]\n",
    "for i_walk_down, i_walk_up in zip(walk_downs, walk_ups):\n",
    "    last_position = positions[-1]\n",
    "    if i_walk_up and last_position < 4:\n",
    "        next_position = last_position + 1\n",
    "    elif i_walk_down and last_position > 1:\n",
    "        next_position = last_position - 1\n",
    "    else:\n",
    "        next_position = last_position\n",
    "    positions.append(next_position)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Use only one iterator to make things clearer ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import random \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "threshold_walk_down = 0.05\n",
    "threshold_walk_up = 0.95\n",
    "\n",
    "start_position = 2\n",
    "positions = [start_position]\n",
    "\n",
    "walk_probabilities = np.random.random(1000)\n",
    "\n",
    "positions = [start_position]\n",
    "for prob in walk_probabilities:\n",
    "    last_position = positions[-1]\n",
    "    if prob > threshold_walk_up and last_position < 4:\n",
    "        next_position = last_position + 1\n",
    "    elif prob < threshold_walk_down and last_position > 1:\n",
    "        next_position = last_position - 1\n",
    "    else:\n",
    "        next_position = last_position\n",
    "    positions.append(next_position)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Object orientation can help in this case ...\n",
    "\n",
    "... but it is not always the best solution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import random \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "thresh_for_walk_down = 0.05\n",
    "thresh_for_walk_up = 0.95\n",
    "start_position = 2\n",
    "n_steps = 1000\n",
    "\n",
    "walker = Walker(thresh_for_walk_down, thresh_for_walk_up, start_position)\n",
    "\n",
    "for i in range(0, n_steps):\n",
    "    walker.take_a_step()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "class Walker():\n",
    "    \n",
    "    def __init__(self, thresh_for_walking_down, thresh_for_walking_up, start_position):\n",
    "        self.__WALK_UP = 1\n",
    "        self.__STAY = 0\n",
    "        self.__WALK_DOWN = -1\n",
    "\n",
    "        self.thresh_for_walking_down = thresh_for_walking_down\n",
    "        self.thresh_for_walking_up = thresh_for_walking_up\n",
    "        self.start_position = start_position\n",
    "        self.positions = [start_position]\n",
    "        self.probabilities = self.generate_probabilities()\n",
    "        \n",
    "    def take_a_step(self):\n",
    "        self.get_prob_for_next_step()\n",
    "        if self.can_walk_up():\n",
    "            self.add_new_position(self.__WALK_UP)\n",
    "        elif self.can_walk_down():\n",
    "            self.add_new_position(self.__WALK_DOWN)\n",
    "        else:\n",
    "            self.add_new_position(self.__STAY)\n",
    "            \n",
    "    def add_new_position(self, next_step):\n",
    "        self.positions.append(self.last_position() + next_step)\n",
    "\n",
    "    def can_walk_up(self):\n",
    "        return self.next_prob > self.thresh_for_walking_up and self.last_position() < 4\n",
    "    \n",
    "    def can_walk_down(self):\n",
    "        return self.next_prob < self.thresh_for_walking_down and self.last_position() > 1\n",
    "    \n",
    "    def generate_probabilities(self):\n",
    "        return np.random.random(1000)\n",
    "    \n",
    "    def get_prob_for_next_step(self):\n",
    "        self.next_prob = np.random.random(1)\n",
    "    \n",
    "    def last_position(self):\n",
    "        return self.positions[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Hands-On: Write a readable, maintainable and reusable program!\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Imagine you are __telling a story to someone__ instead of writing down instructions for a computer. Write down the meaning not the implementation. \n",
    "\n",
    "For this exercise: \n",
    "\n",
    "__Don't use comments__ so you are forced to write meaningful code.\n",
    "\n",
    "__Work in pairs or groups__ if you like!\n",
    "\n",
    "__Put your code on GitHub!__ Create a folder for your program in our [shared GitHub Repository](https://github.com/redfrexx/cs4geos_storycoding/settings). \n",
    "\n",
    "You may __practice collaborating using git__ while you are developing your program."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Exercise 1: 2-Dimensional Random Walker (Beginner)\n",
    "Below is the code for a 2-Dimensional Random Walker. The instructions are there, but the story does not become apparent in the code. You can do a better job than that! __Make it more readable, maintainable and reusable.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Python code for 2D random walk. \n",
    "import numpy \n",
    "import pylab \n",
    "import random \n",
    "  \n",
    "# defining the number of steps \n",
    "n = 100000\n",
    "  \n",
    "#creating two array for containing x and y coordinate \n",
    "#of size equals to the number of size and filled up with 0's \n",
    "x = numpy.zeros(n) \n",
    "y = numpy.zeros(n) \n",
    "  \n",
    "# filling the coordinates with random variables \n",
    "for i in range(1, n): \n",
    "    val = random.randint(1, 4) \n",
    "    if val == 1: \n",
    "        x[i] = x[i - 1] + 1\n",
    "        y[i] = y[i - 1] \n",
    "    elif val == 2: \n",
    "        x[i] = x[i - 1] - 1\n",
    "        y[i] = y[i - 1] \n",
    "    elif val == 3: \n",
    "        x[i] = x[i - 1] \n",
    "        y[i] = y[i - 1] + 1\n",
    "    else: \n",
    "        x[i] = x[i - 1] \n",
    "        y[i] = y[i - 1] - 1\n",
    "      \n",
    "  \n",
    "# plotting stuff: \n",
    "pylab.title(\"Random Walk ($n = \" + str(n) + \"$ steps)\") \n",
    "pylab.plot(x, y) \n",
    "pylab.savefig(\"rand_walk\"+str(n)+\".png\",bbox_inches=\"tight\",dpi=600) \n",
    "pylab.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Exercise 2: Forest Fire (Advanced)\n",
    "Write a program that simulates a forest fire. There three types of cells: fire, tree and empty. A fire cell turns into an empty cell after one time step. The input variables are:\n",
    "\n",
    "* Size of the field in rows and columns\n",
    "* Fraction of the field initially covered by trees\n",
    "* Number of initial fires\n",
    "* Number of timesteps of the simulation\n",
    "* Growth rate of the trees\n",
    "\n",
    "After each timestep, save the numpy array that represents the current state of the field in a list. Pass the list of arrays to the function below to create an animation. \n",
    "\n",
    "When you are done with it, be creative and __add some extra functionalities__ e.g. you can add random new fires inbetween to keep the forest burning.\n",
    "\n",
    "__utils.py__ contains a function that converts a list of numpy arrays into an animation like this one:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "<video controls loop src=\"forest_fire/forest_fire.mp4\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## 1. Write pseudo code of the main processes happening\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pseudo code\n",
    "# define variables\n",
    "# initialize\n",
    "# for step in time_steps:\n",
    "    #do_something"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## 2. Implement the main sturcture in Python so it is executable but doesn't do anything"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "def initialize(apples, pears):\n",
    "    pass\n",
    "\n",
    "def do_something(fruit):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "n_timesteps = 100\n",
    "apples = 5\n",
    "pears = 4\n",
    "fruit = initialize(apples, pears)\n",
    "for step in range(0, n_timesteps):\n",
    "    do_something(fruit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## 3. Implement the functions one by one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "# Embeds the animation in jupyter notebook \n",
    "#from IPython.display import HTML\n",
    "#import utils\n",
    "#maps = # your code produces maps\n",
    "#anim = utils.make_animation(maps)\n",
    "#HTML(anim.to_html5_video())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# References:\n",
    "\n",
    "Martin, R. C. (2009). Clean code: a handbook of agile software craftsmanship. Pearson Education.\n",
    "\n",
    "[Clean Code 101: Meaningful names and functions](https://medium.com/coding-skills/clean-code-101-meaningful-names-and-functions-bf450456d90c)\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python (cs4geos)",
   "language": "python",
   "name": "cs4geos"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
