
# Time schedule



|TIME         |DAY 1       | DAY 2                |DAY 3                         | DAY 4    | DAY 5   |
|---	        |---	                        |---	               |---	                 |---	    |---      |
|9:00 - 9:30  |Introduction|Recap Day 1|Recap Day 2|Recap Day 3|Recap Day 4|
|9:30 - 10:15 |Introduction|Computer Hardware|Reproducability|Errors|Code Review|
|10:15 - 10:30|Objectoriented Programming|Advanced raster processing|Intro Exercise|Intro Exercise|Code Review|
|10:30 - 12:00|Objectoriented Programming|Advanced raster processing|Visualizations|Modularization|Final Assignment|
|12:00 - 13:00|LUNCH when ever you want|Final Questions|
|13:00 - 14:00|Objectoriented Programming|Advanced vector processing|Visualizations|Testing||
|14:00 - 15:00|Questions & Feedback|Questions & Feedback|Questions & Feedback|||

## Day 0 

### Introduction to git 

| Num        | Type           | Topic  | Time [min]|
| ------------- |:-------------:| :-----| :-----|
|10.|T|Introduction to git | 70
|||Difference between concept of git and implementations (whiteboard)
|||Why do you or a scientist need git?
|||Concept of git
|||Open Github in the Browser and show them around (QGIS repo)
|11.|A| __Hands On:__ Clone a git repo + git pull | 90


## Day 1: Advanced vector data processing 


#### Learning objectives: 
1. Name different Python packages for geographic vector data processing and explain their dependencies. 
2. Use object oriented programming to create data structures of geographic entities in Python. 
3. Compare different implementations of geographic data structures for their runtime and explain the differences.
4. Explain when to choose which data structures.


#### Schedule

|Type| Topic | Time [min]|
|:--:| :-----| :-----|
|T|Welcome| |
|T|Agenda for Introduction | 
|T|Administrative Information |
|T|Time Table + Learning objectives| 15
|A|Zusammenarbeit im Kurs besprechen - _Answer garden_ | 25
|A|Activate prior knowledge about vector data processing| 70
|T|Object oriented Programming / Abstraktion / Advanced Python | 70
|A|Quiz| 75
|T|Start assignment | 75

#### Activate knowledge:

- Packages for vector data processing
- interpeted vs compiled programming langues (C vs. python)


#### Exercises: 


OO Programming
1. Write two classes for a point and polygon object. they should contain the methods centroid(), boundinbox(), coordinates(), 
2. Implement a within() distanceTo() relation and compare a polygon and a point.
3. Write a feature class which uses the geometry classes.
Bonus: Implement an abstract parent class from which the two classes inherit. 
Implement more spatial relation checks. Write a generator class which iterates over all features in a file and returns your instances. 

Compare different implementations of vector data representations (own, ogr, shapely, pygeos)
0. use fiona to open a file (context manager)
1. Read the features from a geojson file using your classes and ogr. 
2. Compare the runtime using your classes and the ogr class when calculating the centroid. 
3. Use shapely to do the same and compare. 
4. Explain why ogr and shapely are faster than your code? (DISCUSSION)
5. How to use a spatial index. what is it for?

Optimisation exercise: 
- https://gis.stackexchange.com/questions/10033/using-ogr-and-shapely-more-efficiently/10042
- https://gis.stackexchange.com/questions/119919/maximizing-code-performance-for-shapely


Pandas and geopandas
1. Do some basic pandas tutorial. 
2. Investigate the geometry column of the geopandas data frame. What data type is it? -> shapely
3. Which packages does geopandas use to read data from file? -> fiona
4. Using lambda functions for: map, reduce, filter
4. Do exercise D (temperature) from the Advanced geoscripting course with pandas.
6. Compare runtimes of geopandas. 
7. 
Bonus: making geopandas faster using [Pygeos](https://geopandas.readthedocs.io/en/latest/install.html#using-the-optional-pygeos-dependency) [Cythonize Geopandas](https://jorisvandenbossche.github.io/blog/2017/09/19/geopandas-cython)
/


#### Discussion / Summary
1. There are many vector packages. Order them according to their dependencies. 
2. Why are some implementations faster? Do you have any ideas? -> Compiled vs. Interpreted + Vectorization tomorrow
3. When to use what? 
   - When is it better to implement your own classes? (If you have very specific requirements or want to optimize something)

- What is the advantage of not specifying data types
- map, reduce, filter through lambda


## Day 2: Advanced Raster Data Processing + Computer Hardware

### Learning objectives: 
1. Explain the logical setup of a computer. 
2. Name the factor affecting the performance of a computer. 
3. Explain the "von Neumann Bottleneck" and explain strategies of how to overcome it. 
4. Explain the term vectorization.
5. Explain how geographic data structures in Python are using vectorization. 

### Activation


### Exercises

##### Compare vectorized with non vectorized implementations
see exercises of last year, some more geopandas exercises 
vectoriziing a function in pandas 

##### How to hand large files with limited RAM? 
Vector data
1. Loading very large files using geopandas?
- OGRLayer.setAttributeFilter("type = University")
Raster data
2. How to tile a raster file efficiently? 
3. Learn some rasterio. --> see large rater exercise
4. Write a script that creates tiles (generator)

#### Using git collaboratively 

##### Bonus 
Cython, Numba, Parallel etc


#### Discussion / Summary
1. When is it better to use a database?
2. Why is pygeos faster than ogr? 


## Day 3: Best Practices for Scientific Programming


|A|CS vs Geographers - _Group Discussion_| 45
|T|Explain Geoinformation Science | 55

1. Describe the differences between a computer scientist, a geographer and a geoinformation scientist. 

### Learning goals
1. Name important criteria of a scientist's code.
2. Name strategies for writing good scientific code. 
3. Use unit testing to make your code reliable. 
4. Use the debugger in PyCharm to find bugs. (optional)
5. Know how and when to improve your code. 
6. Learn how to collaborate using git. 

### Activation
- What can you do to organize your code? 
- functions make it more organized, increase reuse
- modules: why is this bas? from xxx import * 

### Exercises
 
#### Testing and debugging code (Reliability)
Give them code with bugs. (Write tests for basic mathematical functions.) 
 
1. Search all bugs and create GitHub issues for them where you describe a reproducible example.
2. Solve the bug using the PyCharm debugger. 
3. Create a test which makes sure that the bug won't return.
4. Maybe restructure your code so you can test it more easily. 

#### Reusability / Readability / Modularization

1. Give them many examples of bad code which they have to improve. 
- code with repetitions without functions
- Code which is better as a class 
- 
1. Give them easy example of code which many repetitions

#### Bonus: Improving code only after there are tests

#### Group project 
1. Add a second random walker.
2. Improve the random walker code. 
3. Add additional functions (e.g. change color, multiple random walkers)
4. Let the user define the start parameters. 
5. Test your code!!!

#### Bonus: Forst Fire


## Day 4: Geodata Visualizations

### Learning goals
1. Name principles of good data visualization. 
2. Use Python to generate maps 
3. Use Python to generate (interactive) graphs. 


### Exercises

Give them the mobile mapping data. 
1. Perform data cleaning. 
2. Generate basic plots using geopandas, seaborn. 
3. Generate interactive plots using plotly. 
4. Come up with more data visualizations.

Intersect the data with another data set (OSM) and make more 

##### Bonus: Make a dashboard


### Discussion and summary
- Discuss the graphs and maps.


## Day 5: Peer review

##### Peer Review of random walker and forest fire code
1. Test your own and each others Geo classes from day 1 and create issues when you find a bug. 
2. Solve the bugs and create a tests for them to improve your code. 
3. Use pylint to find things to improve. 